/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateNewEntityArgs } from "./CreateNewEntityArgs";
import { UpdateNewEntityArgs } from "./UpdateNewEntityArgs";
import { DeleteNewEntityArgs } from "./DeleteNewEntityArgs";
import { NewEntityFindManyArgs } from "./NewEntityFindManyArgs";
import { NewEntityFindUniqueArgs } from "./NewEntityFindUniqueArgs";
import { NewEntity } from "./NewEntity";
import { User } from "../../user/base/User";
import { NewEntityService } from "../newEntity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => NewEntity)
export class NewEntityResolverBase {
  constructor(
    protected readonly service: NewEntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "NewEntity",
    action: "read",
    possession: "any",
  })
  async _newEntitiesMeta(
    @graphql.Args() args: NewEntityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [NewEntity])
  @nestAccessControl.UseRoles({
    resource: "NewEntity",
    action: "read",
    possession: "any",
  })
  async newEntities(
    @graphql.Args() args: NewEntityFindManyArgs
  ): Promise<NewEntity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => NewEntity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "NewEntity",
    action: "read",
    possession: "own",
  })
  async newEntity(
    @graphql.Args() args: NewEntityFindUniqueArgs
  ): Promise<NewEntity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NewEntity)
  @nestAccessControl.UseRoles({
    resource: "NewEntity",
    action: "create",
    possession: "any",
  })
  async createNewEntity(
    @graphql.Args() args: CreateNewEntityArgs
  ): Promise<NewEntity> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NewEntity)
  @nestAccessControl.UseRoles({
    resource: "NewEntity",
    action: "update",
    possession: "any",
  })
  async updateNewEntity(
    @graphql.Args() args: UpdateNewEntityArgs
  ): Promise<NewEntity | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewEntity)
  @nestAccessControl.UseRoles({
    resource: "NewEntity",
    action: "delete",
    possession: "any",
  })
  async deleteNewEntity(
    @graphql.Args() args: DeleteNewEntityArgs
  ): Promise<NewEntity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: NewEntity
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
