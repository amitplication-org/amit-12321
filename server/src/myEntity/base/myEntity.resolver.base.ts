/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteMyEntityArgs } from "./DeleteMyEntityArgs";
import { MyEntityFindManyArgs } from "./MyEntityFindManyArgs";
import { MyEntityFindUniqueArgs } from "./MyEntityFindUniqueArgs";
import { MyEntity } from "./MyEntity";
import { MyEntityService } from "../myEntity.service";
@graphql.Resolver(() => MyEntity)
export class MyEntityResolverBase {
  constructor(protected readonly service: MyEntityService) {}

  async _myEntitiesMeta(
    @graphql.Args() args: MyEntityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [MyEntity])
  async myEntities(
    @graphql.Args() args: MyEntityFindManyArgs
  ): Promise<MyEntity[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => MyEntity, { nullable: true })
  async myEntity(
    @graphql.Args() args: MyEntityFindUniqueArgs
  ): Promise<MyEntity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MyEntity)
  async deleteMyEntity(
    @graphql.Args() args: DeleteMyEntityArgs
  ): Promise<MyEntity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
